// <auto-generated />
using System;
using DiplomProject.Server.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DiplomProject.Server.Migrations
{
    [DbContext(typeof(DiplomDbContext))]
    [Migration("20240716170920_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ScienceEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddByAdminChatId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateEvent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateEventCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InformationEvent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameEvent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlaceEvent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequirementsEvent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ScienceEvents");
                });

            modelBuilder.Entity("Domain.Entities.TelegramUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("text");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubscribed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastMessageTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TgChatId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TelegramUsers");
                });

            modelBuilder.Entity("Domain.Entities.UserCreatedEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateEvent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsWinner")
                        .HasColumnType("boolean");

                    b.Property<string>("NameEvent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlaceEvent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TgUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TgUserId");

                    b.ToTable("UserCreatedEvents");
                });

            modelBuilder.Entity("Domain.Entities.UserCreatedEvent", b =>
                {
                    b.HasOne("Domain.Entities.TelegramUser", "TgUser")
                        .WithMany("UserCreatedEvents")
                        .HasForeignKey("TgUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TgUser");
                });

            modelBuilder.Entity("Domain.Entities.TelegramUser", b =>
                {
                    b.Navigation("UserCreatedEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
